name: CI/CD Pipeline
# create release for staging and production
# with ability to pus hto the correct ecr registry
# likely create my own ecr registry first not through terraform
on:
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dispatcher
  ENVIRONMENT: staging  # Set the default environment here

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Generate Docker image tag
      id: tag
      run: echo "::set-output name=TAG::$(date +'%Y-%m-%d-%H:%M')-${GITHUB_SHA::7}"

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.TAG }} --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.TAG }}
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.TAG }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Save Docker image tag as environment variable
      run: echo "DISPATCHER_IMAGE_TAG=${{ steps.tag.outputs.TAG }}" >> $GITHUB_ENV

    - name: Update Terraform variables
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "dispatcher_image = \"$ECR_REGISTRY/$ECR_REPOSITORY\"" >> ${{ env.ENVIRONMENT }}.tfvars
        echo "dispatcher_image_tag = \"${{ env.DISPATCHER_IMAGE_TAG }}\"" >> ${{ env.ENVIRONMENT }}.tfvars
        echo "environment = \"${{ env.ENVIRONMENT }}\"" >> ${{ env.ENVIRONMENT }}.tfvars

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve -var-file=${{ env.ENVIRONMENT }}.tfvars
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}