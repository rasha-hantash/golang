// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/task_submission.proto

package avsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskSubmissionService_SubmitTask_FullMethodName = "/avsv1.TaskSubmissionService/SubmitTask"
)

// TaskSubmissionServiceClient is the client API for TaskSubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskSubmissionServiceClient interface {
	SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error)
}

type taskSubmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskSubmissionServiceClient(cc grpc.ClientConnInterface) TaskSubmissionServiceClient {
	return &taskSubmissionServiceClient{cc}
}

func (c *taskSubmissionServiceClient) SubmitTask(ctx context.Context, in *SubmitTaskRequest, opts ...grpc.CallOption) (*SubmitTaskResponse, error) {
	out := new(SubmitTaskResponse)
	err := c.cc.Invoke(ctx, TaskSubmissionService_SubmitTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskSubmissionServiceServer is the server API for TaskSubmissionService service.
// All implementations must embed UnimplementedTaskSubmissionServiceServer
// for forward compatibility
type TaskSubmissionServiceServer interface {
	SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error)
	mustEmbedUnimplementedTaskSubmissionServiceServer()
}

// UnimplementedTaskSubmissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskSubmissionServiceServer struct {
}

func (UnimplementedTaskSubmissionServiceServer) SubmitTask(context.Context, *SubmitTaskRequest) (*SubmitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTask not implemented")
}
func (UnimplementedTaskSubmissionServiceServer) mustEmbedUnimplementedTaskSubmissionServiceServer() {}

// UnsafeTaskSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskSubmissionServiceServer will
// result in compilation errors.
type UnsafeTaskSubmissionServiceServer interface {
	mustEmbedUnimplementedTaskSubmissionServiceServer()
}

func RegisterTaskSubmissionServiceServer(s grpc.ServiceRegistrar, srv TaskSubmissionServiceServer) {
	s.RegisterService(&TaskSubmissionService_ServiceDesc, srv)
}

func _TaskSubmissionService_SubmitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSubmissionServiceServer).SubmitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskSubmissionService_SubmitTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSubmissionServiceServer).SubmitTask(ctx, req.(*SubmitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskSubmissionService_ServiceDesc is the grpc.ServiceDesc for TaskSubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskSubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avsv1.TaskSubmissionService",
	HandlerType: (*TaskSubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTask",
			Handler:    _TaskSubmissionService_SubmitTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/task_submission.proto",
}
